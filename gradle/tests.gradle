//source files
sourceSets {
    test {
        groovy {
            srcDirs = ['src/test/unit/groovy']
        }
        resources.srcDir 'src/main/resources'
    }
    integrationTest {
        groovy {
            srcDirs = [ 'src/test/integration/groovy' ]
        }
        resources.srcDir 'src/main/resources'
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
    functionalTest {
        groovy {
            srcDirs = [ 'src/test/functional/groovy' ]
        }
        resources.srcDir 'src/main/resources'
        compileClasspath += sourceSets.main.output + configurations.testCompile
        runtimeClasspath += output + compileClasspath + configurations.testRuntime
    }
}

dependencies {
    testCompile "org.codehaus.groovy:groovy-all:${groovyVersion}"
    testCompile "org.spockframework:spock-core:${spockVersion}"
    testCompile "org.spockframework:spock-spring:${spockVersion}"

    testCompile ("org.springframework.boot:spring-boot-starter-test:${springBootVersion}") {
        exclude(module: 'commons-logging')
        exclude group: "org.springframework.boot", module: "spring-boot-starter-logging"
        exclude group: 'org.apache.logging.log4j', module: 'log4j-slf4j-impl'
    }
}

//provide dependency scopes
configurations {
    testIntegrationCompile.extendsFrom testCompile
    testIntegrationRuntime.extendsFrom testRuntime
    testFunctionalCompile.extendsFrom testCompile
    testFunctionalCompile.extendsFrom testRuntime
}

//integration test
task integrationTest(type: Test) {
    testClassesDirs = project.sourceSets.integrationTest.output.classesDirs
    classpath = sourceSets.integrationTest.runtimeClasspath
    include '**/*IntegrationSpec.*'
    outputs.upToDateWhen { false }
}

//functional test
task functionalTest(type: Test) {
    testClassesDirs = project.sourceSets.functionalTest.output.classesDirs
    classpath = sourceSets.functionalTest.runtimeClasspath
    include '**/*FunctionalSpec.*'
    outputs.upToDateWhen { false }
}

tasks.withType(Test) {
    systemProperties = System.properties
}

integrationTest.reports.html.destination = file("$buildDir/reports/test/integration")
functionalTest.reports.html.destination = file("$buildDir/reports/test/functional")
